     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,fscanf,fprintf,fopen,fclose,printf        ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll  
     9                                  import scanf msvcrt.dll
    10                                  import fscanf msvcrt.dll
    11                                  import fprintf msvcrt.dll  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import fopen msvcrt.dll
    13                                  import fclose msvcrt.dll              ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  import printf msvcrt.dll
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 257300                  format_siruri db '%s',0
    19 00000003 256300                  format_caracter db '%c',0
    20 00000006 25732000                format_afisare db '%s ',0
    21 0000000A <res 0000000A>          nume_input resb 10
    22 00000014 6F75747075742E7478-     nume_output db 'output.txt',0
    22 0000001D 7400               
    23 0000001F FFFFFFFF                descriptor_input dd -1
    24 00000023 FFFFFFFF                descriptor_output dd -1
    25 00000027 <res 00000004>          c resd 1
    26 0000002B 7700                    mod_scris db 'w',0
    27 0000002D 7200                    mod_citire db 'r',0
    28 0000002F <res 00000014>          cuvant resb 20
    29 00000043 <res 00000001>          a resb 1
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34                                          
    35 00000000 68[0A000000]                push dword nume_input
    36 00000005 68[00000000]                push dword format_siruri
    37 0000000A FF15[00000000]              call [scanf]
    38 00000010 83C408                      add esp,8
    39                                      
    40 00000013 68[27000000]                push dword c
    41 00000018 68[03000000]                push dword format_caracter
    42 0000001D FF15[00000000]              call [scanf]
    43 00000023 83C408                      add esp,8
    44                                      
    45 00000026 68[2D000000]                push dword mod_citire
    46 0000002B 68[0A000000]                push dword nume_input
    47 00000030 FF15[00000000]              call [fopen]
    48 00000036 83C408                      add esp,8
    49                                      
    50                                      
    51 00000039 A3[1F000000]                mov [descriptor_input],eax
    52                                      
    53 0000003E 68[2B000000]                push dword mod_scris
    54 00000043 68[14000000]                push dword nume_output
    55 00000048 FF15[00000000]              call [fopen]
    56 0000004E 83C408                      add esp,8
    57                                      
    58 00000051 A3[23000000]                mov [descriptor_output],eax
    59                                      
    60                                      citire_cuvinte:
    61 00000056 68[2F000000]                push dword cuvant
    62 0000005B 68[00000000]                push dword format_siruri
    63 00000060 FF35[1F000000]              push dword [descriptor_input]
    64 00000066 FF15[00000000]              call [fscanf]
    65 0000006C 83C40C                      add esp,12
    66                                      
    67 0000006F 68[43000000]                push dword a
    68 00000074 68[03000000]                push dword format_caracter
    69 00000079 FF35[1F000000]              push dword [descriptor_input]
    70 0000007F FF15[00000000]              call [fscanf]
    71 00000085 83C40C                      add esp,12
    72                                      
    73 00000088 803D[43000000]0A            cmp [a],byte 10
    74 0000008F 743A                        je final
    75                                      
    76 00000091 BA00000000                  mov edx,0
    77                                      numar_litere:
    78 00000096 8A82[2F000000]              mov al,[cuvant+edx]
    79 0000009C 42                          inc edx
    80 0000009D 80BA[2F000000]00            cmp byte[cuvant+edx],0
    81 000000A4 75F0                        jne numar_litere
    82                                      
    83 000000A6 3A05[27000000]              cmp al,byte[c]
    84 000000AC 7402                        je afisare
    85 000000AE 75A6                        jne citire_cuvinte
    86                                      
    87                                      
    88                                      afisare:
    89 000000B0 68[2F000000]                push dword cuvant
    90 000000B5 68[06000000]                push dword format_afisare
    91 000000BA FF35[23000000]              push dword [descriptor_output]
    92 000000C0 FF15[00000000]              call [fprintf]
    93 000000C6 83C408                      add esp,8
    94 000000C9 EB8B                        jmp citire_cuvinte
    95                                      
    96                                     
    97                                      
    98                                     
    99                                      final:
   100 000000CB FF35[1F000000]              push dword [descriptor_input]
   101 000000D1 FF15[00000000]              call [fclose]
   102 000000D7 83C404                      add esp,4
   103                                      
   104 000000DA FF35[23000000]              push dword [descriptor_output]
   105 000000E0 FF15[00000000]              call [fclose]
   106 000000E6 83C404                      add esp,4
   107                                      
   108                                          ; exit(0)
   109 000000E9 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   110 000000EB FF15[00000000]                  call    [exit]       ; call exit to terminate the program
