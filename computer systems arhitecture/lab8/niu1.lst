     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,fscanf,fprintf,fscanf,fopen,printf
     8                                  import scanf msvcrt.dll
     9                                  import fscanf msvcrt.dll
    10                                  import fprintf msvcrt.dll      
    11                                  import fscanf msvcrt.dll 
    12                                  import fopen msvcrt.dll     
    13                                  import printf msvcrt.dll    ; tell nasm that exit exists even if we won't be defining it
    14                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19 00000000 257300                  format_sir db '%s',0
    20 00000003 256300                  format_carac db '%c',0
    21 00000006 256400                  format_numar db '%d',0
    22                                  
    23 00000009 7200                    mod_citire db 'r',0
    24 0000000B FFFFFFFF                descriptor1 dd -1
    25                                  
    26 0000000F <res 00000001>          caracter_fisier resb 1
    27 00000010 <res 0000000A>          sir resb 10
    28 0000001A <res 00000001>          carac resb 1
    29 0000001B <res 00000001>          numar resb 1
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34 00000000 68[10000000]                push dword sir
    35 00000005 68[00000000]                push dword format_sir
    36 0000000A FF15[00000000]              call [scanf]
    37 00000010 83C408                      add esp,4*2
    38                                      
    39 00000013 68[1A000000]                push dword carac
    40 00000018 68[03000000]                push dword format_carac
    41 0000001D FF15[00000000]              call [scanf]
    42 00000023 83C408                      add esp,4*2
    43                                  
    44 00000026 68[1B000000]                push dword numar
    45 0000002B 68[06000000]                push dword format_numar
    46 00000030 FF15[00000000]              call [scanf]
    47 00000036 83C408                      add esp,4*2
    48                                      
    49 00000039 68[09000000]                push dword mod_citire
    50 0000003E 68[10000000]                push dword sir
    51 00000043 FF15[00000000]              call [fopen]
    52 00000049 83C408                      add esp,4*2
    53                                      
    54 0000004C A3[0B000000]                mov [descriptor1],eax
    55                                      
    56                                      repeta:
    57 00000051 68[0F000000]                push dword caracter_fisier
    58 00000056 68[03000000]                push dword format_carac
    59 0000005B FF35[0B000000]              push dword [descriptor1]
    60 00000061 FF15[00000000]              call [fscanf]
    61 00000067 83C40C                      add esp,4*3
    62                                      
    63 0000006A A0[1A000000]                mov al,[carac]
    64 0000006F 3805[0F000000]              cmp [caracter_fisier],al
    65 00000075 7520                        jne final_loop
    66 00000077 8B0D[1B000000]              mov ecx,[numar]
    67                                      
    68                                      forex:
    69 0000007D 60                          pushad
    70 0000007E FF35[0F000000]              push dword [caracter_fisier]
    71 00000084 68[03000000]                push dword format_carac
    72 00000089 FF15[00000000]              call [printf]
    73 0000008F 83C408                      add esp,4*2
    74 00000092 61                          popad
    75 00000093 E2E8                        loop forex
    76 00000095 EB14                        jmp peste
    77                                      
    78                                      
    79                                      
    80                                      final_loop:
    81 00000097 FF35[0F000000]              push dword [caracter_fisier]
    82 0000009D 68[03000000]                push dword format_carac
    83 000000A2 FF15[00000000]              call [printf]
    84 000000A8 83C408                      add esp,4*2
    85                                      
    86                                      peste:
    87 000000AB 803D[0F000000]0A            cmp [caracter_fisier],byte 10
    88 000000B2 759D                        jne repeta
    89                                      
    90                                      final:
    91                                      
    92                                          ; exit(0)
    93 000000B4 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    94 000000B6 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
