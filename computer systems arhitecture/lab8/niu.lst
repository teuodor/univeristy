     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                   
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                   
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf,fopen,fread,fscanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fscanf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 257300                  format_sir db '%s', 0
    18 00000003 256300                  format_caracter db '%c',0
    19 00000006 256400                  format_nr db '%d',0
    20                                   
    21 00000009 <res 00000064>          sir resb 100
    22 0000006D 00000000                carac dd 0
    23 00000071 00000000                numar dd 0
    24 00000075 00000000                fstream dd 0
    25 00000079 7200                    mod_citire db 'r',0
    26 0000007B <res 00000064>          sir_fisier resb 100
    27 000000DF <res 00000001>          caracter_fisier resb 1
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32                                         
    33 00000000 68[09000000]                    push dword sir
    34 00000005 68[00000000]                    push dword format_sir
    35 0000000A FF15[00000000]                  call [scanf]
    36 00000010 83C408                          add esp,4*2
    37                                         
    38 00000013 68[6D000000]                    push dword carac
    39 00000018 68[00000000]                    push dword format_sir
    40 0000001D FF15[00000000]                  call [scanf]
    41 00000023 83C408                          add esp,4*2
    42                                         
    43 00000026 68[71000000]                    push dword numar
    44 0000002B 68[06000000]                    push dword format_nr
    45 00000030 FF15[00000000]                  call [scanf]
    46 00000036 83C408                          add esp,4*2
    47                                         
    48 00000039 68[79000000]                    push dword mod_citire
    49 0000003E 68[09000000]                    push dword sir
    50 00000043 FF15[00000000]                  call [fopen]
    51                                         
    52 00000049 A3[75000000]                    mov [fstream],eax
    53                                         
    54                                         
    55                                         
    56                                          repeta:
    57 0000004E 68[DF000000]                    push dword caracter_fisier
    58 00000053 68[03000000]                    push dword format_caracter
    59 00000058 FF35[75000000]                  push dword [fstream]
    60 0000005E FF15[00000000]                  call [fscanf]
    61 00000064 83C40C                          add esp,4*3
    62                                         
    63 00000067 A0[6D000000]                    mov al,[carac]
    64 0000006C 3805[DF000000]                  cmp [caracter_fisier],al
    65 00000072 7520                            jne final_loop
    66 00000074 8B0D[71000000]                  mov ecx,[numar]
    67                                         
    68                                          forex:
    69 0000007A 60                              pushad
    70 0000007B FF35[DF000000]                  push dword [caracter_fisier]
    71 00000081 68[03000000]                    push dword format_caracter
    72 00000086 FF15[00000000]                  call [printf]
    73 0000008C 83C408                          add esp,4*2
    74 0000008F 61                              popad
    75 00000090 E2E8                            loop forex
    76 00000092 EB14                            jmp peste
    77                                         
    78                                         
    79                                          final_loop:
    80 00000094 FF35[DF000000]                  push dword [caracter_fisier]
    81 0000009A 68[03000000]                    push dword format_caracter
    82 0000009F FF15[00000000]                  call [printf]
    83 000000A5 83C408                          add esp,4*2
    84                                         
    85                                         
    86                                          peste:
    87 000000A8 8A15[DF000000]                  mov dl,byte[caracter_fisier]
    88 000000AE 80FA00                          cmp dl,0
    89 000000B1 759B                            jne repeta
    90                                         
    91                                         
    92                                          final:
    93                                          ; exit(0)
    94 000000B3 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    95 000000B5 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
