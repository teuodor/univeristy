     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 02                          a db 2
    15 00000001 03                          b db 3
    16 00000002 0201                        c dw 258
    17 00000004 78000000                    e dd 120
    18 00000008 2E01000000000000            x dq 302
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ... (a-2)/(b+c)+a*c+e-x; a,b-byte; c-word; e-doubleword;-cu semn
    23 00000000 A0[00000000]                mov al,[a]
    24 00000005 2C02                        sub al,2
    25 00000007 6698                        cbw
    26 00000009 6699                        cwd
    27 0000000B 668B1D[02000000]            mov bx,[c]
    28 00000012 021D[01000000]              add bl,[b]
    29 00000018 66F7F3                      div bx;ax=(a-2)/(b+c)
    30 0000001B 6689C1                      mov cx,ax;cx=(a-2)/(b+c)
    31 0000001E A0[00000000]                mov al,[a]
    32 00000023 6698                        cbw;ax=a
    33 00000025 66F725[02000000]            mul word [c]
    34 0000002C 6652                        push dx
    35 0000002E 6650                        push ax
    36 00000030 58                          pop eax;eax=a*c
    37 00000031 89C3                        mov ebx,eax;ebx=a*c
    38 00000033 6689C8                      mov ax,cx;ax=(a-2)/(b+c)
    39 00000036 98                          cwde
    40 00000037 01C3                        add ebx,eax;ebx=(a-2)/(b+c)+a*c
    41 00000039 89D8                        mov eax,ebx;eax=(a-2)/(b+c)+a*c
    42 0000003B 99                          cdq;edx:eax=(a-2)/(b+c)+a*c
    43 0000003C 8B1D[04000000]              mov ebx,[e]
    44 00000042 01D8                        add eax,ebx
    45 00000044 83D200                      adc edx,0;edx:eax=(a-2)/(b+c)+a*c+e
    46 00000047 8B1D[08000000]              mov ebx,dword[x]
    47 0000004D 8B0D[0C000000]              mov ecx,dword[x+4]
    48 00000053 29D8                        sub eax,ebx
    49 00000055 19CA                        sbb edx,ecx
    50                                      
    51                                      
    52                                      
    53                                      
    54                                      
    55                                      
    56                                      
    57                                      
    58                                      
    59                                      
    60                                          ; exit(0)
    61 00000057 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000059 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
