def quicksort(l):
    if len(l) <= 1:
        return l
    else:
        pivot = l[0]
        greater = quicksort([x for x in l[1:] if x>=pivot])
        lesser = quicksort([x for x in l[1:] if x<pivot])
        return lesser + [pivot] + greater
    

def bubblesort(l):
    sorted = False
    while not sorted:
        sorted = True
        for i in range(1,len(l)-1):
            if l[i-1]>l[i]:
                aux = l[i-1]
                l[i-1] = l[i]
                l[i] = aux
                sorted = False
    return l

def selectionsort(l):
    for i in range(0,len(l)-2):
        for j in range(i+1,len(l)-1):
            if l[i]>l[j]:
                aux = l[i]
                l[i] = l[j]
                l[j] = aux
    return l

def insertionsort(l):
    for i in range(0,len(l)-1):
        ind = i-1
        a = l[i]
        while ind>=0 and a<l[ind]:
            l[ind+1]=l[ind]
            ind = ind - 1
        l[ind+1] = a
    return l
def interclasare(l1,l2):
    rez = []
    i = 0
    j = 0
    while i<len(l1)-1 and j <len(l2)-1:
        if l1[i] < l2[j]:
            rez.append(l1[i])
            i = i+1
        if l1[i] > l2[j]:
            rez.append(l2[j])
            j = j+1
            
    while i<len(l1):
        rez.append(l1[i])
        i = i+1
    while j < len(l2):
        rez.append(l2[j])
        j = j+1
    return rez
def mergesort(l):
    if len(l)<=1:
        return l
    else:
        m = len(l) // 2
        st = mergesort(l[:m])
        dr = mergesort(l[m:])
        return interclasare(st,dr)
    
print(mergesort([1,3,3,1,0,4,5,2,2,8,9]))
